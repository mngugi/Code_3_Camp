# Disclaimer: This function was generated by AI. Please review before using.
# Agent Name: data_visualization_agent
# Time Created: 2025-01-14 16:37:15

def data_visualization(data_raw):
    import pandas as pd
    import numpy as np
    import json
    import plotly.graph_objects as go
    import plotly.io as pio





    # Ensure Month is in datetime format
    data_raw['Month'] = pd.to_datetime(data_raw['Month'])
    
    # Group data by Month and TerritoryDescription and sum TotalRevenue
    grouped_data = data_raw.groupby(['Month', 'TerritoryDescription'], as_index=False)['TotalRevenue'].sum()
    
    # Create a line plot
    fig = go.Figure()
    
    # Add traces for each territory
    territories = grouped_data['TerritoryDescription'].unique()
    for territory in territories:
        territory_data = grouped_data[grouped_data['TerritoryDescription'] == territory]
        fig.add_trace(go.Scatter(
            x=territory_data['Month'],
            y=territory_data['TotalRevenue'],
            mode='lines+markers',
            name=territory,
            line=dict(color='#3381ff', width=0.65),
            hoverinfo='text',
            hovertext=territory_data.apply(lambda row: f'Month: {row["Month"].strftime("%Y-%m")}<br>Total Revenue: ${row["TotalRevenue"]:,.2f}', axis=1)
        ))
    
    # Update layout
    fig.update_layout(
        title="Sales Revenue by Month and Territory",
        xaxis_title="Month",
        yaxis_title="Total Revenue",
        template="plotly_white",
        hoverlabel=dict(font_size=8.8),
        title_font_size=13.2,
        xaxis=dict(tickfont=dict(size=8.8), linewidth=0.65),
        yaxis=dict(tickfont=dict(size=8.8), linewidth=0.65),
        legend=dict(font=dict(size=8.8))
    )
    
    # Add dropdown menu for territory selection
    fig.update_layout(
        updatemenus=[
            {
                'buttons': [
                    {
                        'label': territory,
                        'method': 'update',
                        'args': [{'visible': [t == territory for t in territories]},
                                  {'title': f'Sales Revenue by Month and Territory - {territory}'}]
                    } for territory in territories
                ],
                'direction': 'down',
                'showactive': True,
                'x': 0.17,
                'xanchor': 'left',
                'y': 1.15,
                'yanchor': 'top'
            }
        ]
    )

    fig_json = pio.to_json(fig)
    fig_dict = json.loads(fig_json)
    
    return fig_dict